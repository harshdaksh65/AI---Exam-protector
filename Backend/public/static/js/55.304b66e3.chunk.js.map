{"version":3,"file":"static/js/55.304b66e3.chunk.js","mappings":"oJAIA,MAgBA,EAhBsBA,IAAA,IAAC,MAAEC,EAAK,YAAEC,EAAW,SAAEC,GAAUH,EAAA,OACrDI,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAAAF,SAAA,EACLG,EAAAA,EAAAA,KAAA,SAAAH,SAAQF,KACRK,EAAAA,EAAAA,KAAA,QAAMC,KAAK,cAAcC,QAASN,OAEnCC,IACG,C,8ECPR,MAiBA,EAjBkBH,IAA8B,IAA7B,SAAEG,EAAQ,UAAEM,GAAWT,EACxC,OACEM,EAAAA,EAAAA,KAACI,EAAAA,EAAI,CACHC,GAAI,CAAEC,EAAG,EAAGC,SAAU,YACtBJ,UAAWA,EACXK,UAAW,EACXC,aAASC,EAAUb,SAElBA,GACI,C,uECVX,MAAMc,EAAY,aAGLC,EAAsBC,EAAAA,EAASC,gBAAgB,CAC1DC,UAAYC,IAAO,CAEjBC,gBAAiBD,EAAQE,MAAM,CAC7BA,MAAQC,IAAM,CACZC,IAAI,GAADC,OAAKV,EAAS,kBAAAU,OAAiBF,GAClCG,OAAQ,UAIZC,gBAAiBP,EAAQQ,SAAS,CAChCN,MAAQO,IAAI,CACVL,IAAI,GAADC,OAAKV,EAAS,iBACjBW,OAAQ,OACRI,KAAMD,WAOD,wBAAEE,EAAuB,2BAAEC,GAA+BhB,C,wFCxBvE,MAAMD,EAAY,aAGLkB,EAAehB,EAAAA,EAASC,gBAAgB,CACnDC,UAAYC,IAAO,CAEjBc,SAAUd,EAAQE,MAAM,CACtBA,MAAOA,KAAA,CACLE,IAAI,GAADC,OAAKV,EAAS,SACjBW,OAAQ,UAIZS,WAAYf,EAAQQ,SAAS,CAC3BN,MAAQO,IAAI,CACVL,IAAI,GAADC,OAAKV,EAAS,SACjBW,OAAQ,OACRI,KAAMD,MAIVO,aAAchB,EAAQE,MAAM,CAC1BA,MAAQC,IAAM,CACZC,IAAI,GAADC,OAAKV,EAAS,oBAAAU,OAAmBF,GACpCG,OAAQ,UAIZW,eAAgBjB,EAAQQ,SAAS,CAC/BN,MAAQO,IAAI,CACVL,IAAI,GAADC,OAAKV,EAAS,mBACjBW,OAAQ,OACRI,KAAMD,WAOD,iBACXS,EAAgB,sBAChBC,EAAqB,qBACrBC,EAAoB,0BACpBC,GACER,C,gFC7CJ,MAAMS,EAAc,eAEPC,EAAiB1B,EAAAA,EAASC,gBAAgB,CACrDC,UAAYC,IAAO,CAEjBwB,iBAAkBxB,EAAQE,MAAM,CAC9BA,MAAQC,IAAM,CACZC,IAAI,GAADC,OAAKiB,EAAW,UAAAjB,OAASF,GAC5BG,OAAQ,UAIZmB,kBAAmBzB,EAAQE,MAAM,CAC/BA,MAAQwB,IAAS,CACftB,IAAI,GAADC,OAAKiB,EAAW,aAAAjB,OAAYqB,GAC/BpB,OAAQ,QAEVqB,aAAc,CAAC,CAAEC,KAAM,qBAGzBC,oBAAqB7B,EAAQQ,SAAS,CACpCN,MAAOxB,IAAA,IAAC,UAAEgD,EAAS,OAAEvB,EAAM,QAAE2B,GAASpD,EAAA,MAAM,CAC1C0B,IAAI,GAADC,OAAKiB,EAAW,YACnBhB,OAAQ,OACRI,KAAM,CAAEgB,YAAWvB,SAAQ2B,WAC5B,IAGHC,mBAAoB/B,EAAQQ,SAAS,CACnCN,MAAO8B,IAAA,IAAC,SAAEC,EAAQ,OAAEC,EAAM,UAAEC,GAAWH,EAAA,MAAM,CAC3C5B,IAAI,GAADC,OAAKiB,EAAW,KAAAjB,OAAI4B,GACvB3B,OAAQ,MACRI,KAAM,CAAEwB,SAAQC,aACjB,EACDC,gBAAiB,CAAC,CAAER,KAAM,0BAKnB,0BAAES,EAAyB,8BAAEC,EAA6B,+BAAEC,EAA8B,yBAAEC,GAA6BjB,C,sOC1BvH,SAASkB,EAAsB/D,GAA+F,IAA9F,UAAEgE,EAAS,QAAEZ,EAAO,SAAEa,EAAQ,gBAAEC,EAAe,mBAAEC,EAAkB,qBAAEC,GAAsBpE,EAExI,MAAOqE,EAAqBC,IAA0BC,EAAAA,EAAAA,UAAS,OAC/DC,EAAAA,EAAAA,YAAU,KAER,GAAIpB,GAAWY,GAAaA,EAAUE,GAAkB,CACtD,MAAMO,EAAYrB,EAAQsB,MAAKC,GAAKA,EAAEC,aAAeZ,EAAUE,GAAiBW,MAChFP,EAAuBG,EAAYA,EAAUJ,oBAAsB,KACrE,IACC,CAACH,EAAiBd,EAASY,IAW9B,OAAKA,GAAkC,IAArBA,EAAUc,QAK1BxE,EAAAA,EAAAA,KAACI,EAAAA,EAAI,CAAAP,UACHC,EAAAA,EAAAA,MAAC2E,EAAAA,EAAW,CAAA5E,SAAA,EACVC,EAAAA,EAAAA,MAAC4E,EAAAA,EAAU,CAACjE,QAAQ,KAAKkE,GAAI,EAAE9E,SAAA,CAAC,YACpB+D,EAAkB,EAAE,QAEhC5D,EAAAA,EAAAA,KAAC0E,EAAAA,EAAU,CAACjE,QAAQ,QAAQkE,GAAI,EAAE9E,SAC/B6D,EAAUE,GAAiBgB,YAE9B5E,EAAAA,EAAAA,KAAC6E,EAAAA,EAAG,CAACF,GAAI,EAAE9E,UACTG,EAAAA,EAAAA,KAAC8E,EAAAA,EAAW,CAACC,UAAU,WAAUlF,SAC9B6D,EAAUE,GAAiBoB,QAAQC,KAAI,CAACC,EAAQC,KAC/CnF,EAAAA,EAAAA,KAACoF,EAAAA,EAAgB,CAEfC,SACErF,EAAAA,EAAAA,KAACsF,EAAAA,EAAQ,CACPC,QAASxB,IAAwBoB,EACjCK,SAAUA,IA9BAL,KAAS,IAADM,EAClCzB,EAAuBmB,GACC,oBAAbxB,GAAqD,QAA9B8B,EAAI/B,EAAUE,UAAgB,IAAA6B,GAA1BA,EAA4BlB,KAChEZ,EAASD,EAAUE,GAAiBW,IAAKY,EAC3C,EA0BgCO,CAAmBP,KAGvCQ,MAAOT,EAAOU,YAPTV,EAAOX,YAYpBvE,EAAAA,EAAAA,KAAC6F,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAGC,eAAe,gBAAenG,SAC9D+D,IAAoBF,EAAUc,OAAS,GACtCxE,EAAAA,EAAAA,KAACiG,EAAAA,EAAM,CACLxF,QAAQ,YACRyF,MAAM,UACNC,QAASrC,EACTsC,MAAO,CAAEC,WAAY,QAASxG,SAC/B,YAIDG,EAAAA,EAAAA,KAACiG,EAAAA,EAAM,CACLxF,QAAQ,YACRyF,MAAM,UACNC,QAAStC,EACTyC,SAAkC,OAAxBvC,EACVqC,MAAO,CAAEC,WAAY,QAASxG,SAC/B,0BA7CFG,EAAAA,EAAAA,KAAC0E,EAAAA,EAAU,CAACjE,QAAQ,QAAOZ,SAAC,2BAqDvC,C,sBClFA,MAkGA,EAlG0BH,IAAgJ,IAA/I,eAAE6G,EAAc,WAAEC,EAAU,sBAAEC,EAAqB,gBAAE7C,EAAe,iBAAE8C,EAAgB,QAAE5D,EAAO,UAAEY,EAAS,iBAAEiD,EAAgB,UAAEC,GAAWlH,EAClK,MAAMmH,EAAiBN,EAEjBO,EAAkBC,MAAMC,KAAK,CAAExC,OAAQqC,IAAkB,CAACI,EAAGC,IAAUA,EAAQ,IAQ/EC,EAAO,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAgBtC,OAAQ4C,GAAK,EAC/CD,EAAKE,KAAKP,EAAgBQ,MAAMF,EAAGA,EAAI,IAIzC,MAAOG,EAAOC,IAAYvD,EAAAA,EAAAA,UAASwC,GAoBnC,OAlBAvC,EAAAA,EAAAA,YAAU,KACRsD,EAASf,EAAsB,GAC9B,CAACA,KAEJvC,EAAAA,EAAAA,YAAU,KACR,GAAI0C,EAAW,OACf,GAAIW,GAAS,EAEX,YADAf,IAGF,MAAMiB,EAAYC,aAAY,KAC5BF,GAAUG,GAAcA,EAAY,GAAE,GACrC,KACH,MAAO,KACLC,cAAcH,EAAU,CACzB,GACA,CAACF,EAAOf,EAAYI,KAGrB9G,EAAAA,EAAAA,MAAA+H,EAAAA,SAAA,CAAAhI,SAAA,EACEG,EAAAA,EAAAA,KAAC6E,EAAAA,EAAG,CACFtE,SAAS,SACTuH,IAAI,IACJC,OAAQ,EACRC,QAAQ,QACRC,SAAS,OACTC,MAAM,OACNC,GAAI,EACJtI,UAEAC,EAAAA,EAAAA,MAAC+F,EAAAA,EAAK,CAACC,UAAU,MAAMsC,WAAW,SAASpC,eAAe,gBAAenG,SAAA,EACvEC,EAAAA,EAAAA,MAAC4E,EAAAA,EAAU,CAACjE,QAAQ,KAAIZ,SAAA,CAAC,cACX+D,EAAkB,EAAE,IAAE2C,MAEpCzG,EAAAA,EAAAA,MAAC4E,EAAAA,EAAU,CAACjE,QAAQ,KAAIZ,SAAA,CAAC,cACXwI,KAAKC,MAAMf,EAAQ,IAAI,IAAEA,EAAQ,OAE/CvH,EAAAA,EAAAA,KAACiG,EAAAA,EAAM,CAACxF,QAAQ,YAAY0F,QAASA,IAAMK,IAAcN,MAAM,QAAQI,SAAUM,EAAU/G,SACxF+G,EAAY,iBAAmB,sBAKtC5G,EAAAA,EAAAA,KAAC6E,EAAAA,EAAG,CAACvE,EAAG,EAAGiI,GAAI,EAAGC,UAAU,QAAO3I,UACjCG,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACC,WAAS,EAAC3C,QAAS,EAAElG,SACxBsH,EAAKlC,KAAI,CAAC0D,EAAKC,KACd5I,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAgBI,MAAI,EAACC,GAAI,GAAGjJ,UAC/BG,EAAAA,EAAAA,KAAC6F,EAAAA,EAAK,CAACC,UAAU,MAAMsC,WAAW,SAASpC,eAAe,QAAOnG,SAC9D8I,EAAI1D,KAAK8D,IACR,MAAMC,EAActF,GAAaA,EAAUqF,EAAiB,GACtDE,EAAqBtC,GAAoBqC,GAAerC,EAAiBuC,SAASF,EAAYzE,KACpG,OACEvE,EAAAA,EAAAA,KAACmJ,EAAAA,EAAM,CAEL1I,QAAQ,UACR2F,MAAO,CACL8B,MAAO,OACPkB,OAAQ,OACRC,SAAU,OACVC,OAAQ,UACRC,OAAQ,MACRC,WAAYP,EAAqB,UAAY,OAC7C/C,MAAO,QAETC,QAASA,IA/EM4C,KACD,oBAArBrC,GACTA,EAAiBqC,EAAiB,EACpC,EA4EiCU,CAA0BV,GAAgBlJ,SAExDkJ,GAbIA,EAcE,OArBNH,WA6BhB,E,gFC3FQ,SAASc,EAAIhK,GAAsC,IAArC,YAAEiK,EAAW,kBAAEC,GAAmBlK,EAC7D,MAAMmK,GAAmBC,EAAAA,EAAAA,QAAO,OACzBC,EAAWC,IAAgB/F,EAAAA,EAAAA,WAAS,IACpCgG,EAAWC,IAAgBjG,EAAAA,EAAAA,UAAS,MACrCkG,GAAYL,EAAAA,EAAAA,QAAO,MACnBM,GAAYN,EAAAA,EAAAA,QAAO,MAEnBpH,GAAuB,OAAXiH,QAAW,IAAXA,OAAW,EAAXA,EAAajH,aAAwB,OAAXiH,QAAW,IAAXA,OAAW,EAAXA,EAAapF,MAAO,KAC1DpD,GAAoB,OAAXwI,QAAW,IAAXA,OAAW,EAAXA,EAAaxI,SAAU,KAWhCkJ,EAASC,UACb,GAC+B,qBAAtBH,EAAUI,SACK,OAAtBJ,EAAUI,SAC6B,IAAvCJ,EAAUI,QAAQC,MAAMC,WACxB,CACA,MAAMD,EAAQL,EAAUI,QAAQC,MAC1BE,EAAaP,EAAUI,QAAQC,MAAME,WACrCC,EAAcR,EAAUI,QAAQC,MAAMG,YAE5CR,EAAUI,QAAQC,MAAMtC,MAAQwC,EAChCP,EAAUI,QAAQC,MAAMpB,OAASuB,EAEjCP,EAAUG,QAAQrC,MAAQwC,EAC1BN,EAAUG,QAAQnB,OAASuB,EAE3B,MAAMC,QAAYC,EAAIR,OAAOG,GAEjBJ,EAAUG,QAAQO,WAAW,MAEzC,IAAIC,EAAe,EACfH,EAAIpG,OAAS,IACfoF,GAAmBoB,IAAOC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACrBD,GAAO,IACVE,YAAaF,EAAQE,YAAc,MAErCC,IAAK,mBAAoB,2BAA4B,UAEvDP,EAAIQ,SAASC,IACW,eAAlBA,EAAQC,QACV1B,GAAmBoB,IAAOC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACrBD,GAAO,IACVO,eAAgBP,EAAQO,eAAiB,MAE3CJ,IAAK,sBAAuB,2BAA4B,UAEpC,SAAlBE,EAAQC,QACV1B,GAAmBoB,IAAOC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACrBD,GAAO,IACVQ,sBAAuBR,EAAQQ,sBAAwB,MAEzDL,IAAK,6BAA8B,2BAA4B,UAG1C,YAAlBE,EAAQC,OACXH,IAAK,mBAAoB,2BAA4B,SAEjC,WAAlBE,EAAQC,QACVP,IACIA,EAAe,IACjBnB,GAAmBoB,IAAOC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACrBD,GAAO,IACVS,kBAAmBT,EAAQS,kBAAoB,MAEjDN,IAAK,0BAA2B,2BAA4B,SAC5DJ,EAAe,GAEnB,GAEJ,GAyDF,OAvDA7G,EAAAA,EAAAA,YAAU,KAtEMoG,WACd,MAAMO,QAAYa,EAAAA,OAClBC,QAAQC,IAAI,qBAEZlE,aAAY,KACV2C,EAAOQ,EAAI,GACV,KAAK,EAiERgB,GAEA,IAAIC,EAAc,KACdC,EAAW,KACXC,EAAS,GACb,MAkCMC,EAAWvE,aAAY,KACvByC,EAAUI,SAAWJ,EAAUI,QAAQ2B,SAAWnC,IAnCjCO,WACjBH,EAAUI,SAAWJ,EAAUI,QAAQ2B,SACzCJ,EAAc3B,EAAUI,QAAQ2B,OAChCH,EAAW,IAAII,OAAOC,cAAcN,EAAa,CAAEO,SAAU,eAC7DxC,EAAiBU,QAAUwB,EAC3BA,EAASO,gBAAmBC,IACtBA,EAAE9K,MAAQ8K,EAAE9K,KAAK+K,KAAO,GAC1BR,EAAO3E,KAAKkF,EAAE9K,KAChB,EAEFsK,EAASU,OAASnC,UAChB,MAAMoC,EAAO,IAAIC,KAAKX,EAAQ,CAAEpJ,KAAM,eAGtC,GAFAsH,EAAawC,GAETA,GAAQhK,GAAavB,EAAQ,CAC/B,MAAMyL,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASJ,EAAK,QAADrL,OAAUF,EAAM,aAAAE,OAAYqB,EAAS,UAClEkK,EAASE,OAAO,YAAapK,GAC7BkK,EAASE,OAAO,SAAU3L,GAC1B,UACQ4L,EAAAA,EAAMC,KAAK,cAAeJ,EAAU,CACxCK,QAAS,CAAE,eAAgB,yBAE7BtB,QAAQC,IAAI,8BACd,CAAE,MAAOsB,GACPvB,QAAQwB,MAAM,uBAAwBD,EACxC,CACF,GAEFnB,EAASqB,QACTpD,GAAa,GACf,EAKEqD,GACAzF,cAAcqE,GAChB,GACC,KACH,MAAO,KAEDpC,EAAiBU,SAAWR,IAC9BF,EAAiBU,QAAQ+C,OACzBtD,GAAa,GACf,CACD,GACA,CAACtH,EAAWvB,EAAQ4I,KAGrB/J,EAAAA,EAAAA,KAAC6E,EAAAA,EAAG,CAAAhF,UACFC,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CAACK,QAAQ,WAAUZ,SAAA,EACtBG,EAAAA,EAAAA,KAACuN,IAAM,CACLC,IAAKrD,EACLsD,OAAO,EACPrH,MAAO,CACLsH,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EAER3F,MAAO,OACPkB,OAAQ,WAIZpJ,EAAAA,EAAAA,KAAA,UACEwN,IAAKpD,EACLhE,MAAO,CACL7F,SAAU,WACV8F,WAAY,OACZyH,YAAa,OACbJ,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACR3F,MAAO,IACPkB,OAAQ,WAMpB,C,4CCjLA,MAEa2E,EAAkBlN,EAAAA,EAASC,gBAAgB,CACtDC,UAAYC,IAAO,CACjBgN,iBAAkBhN,EAAQE,MAAM,CAC9BA,MAAOxB,IAAA,IAAC,OAAEyB,EAAM,UAAEuB,GAAWhD,EAAA,MAAM,CACjC0B,IAAI,GAADC,OANS,gBAMO,WAAAA,OAAUF,EAAM,KAAAE,OAAIqB,GACvCpB,OAAQ,MACT,SAKM,yBAAE2M,GAA6BF,E,cCA5C,MAwKA,EAxKiBG,KACf,MAAOtK,EAAiBuK,IAAsBlK,EAAAA,EAAAA,UAAS,IAChDpB,IAAuBU,EAAAA,EAAAA,OACvBT,EAASsL,IAAcnK,EAAAA,EAAAA,UAAS,KAChC0C,EAAkB0H,IAAuBpK,EAAAA,EAAAA,UAAS,KACnD,OAAE9C,EAAM,OAAEmN,IAAWC,EAAAA,EAAAA,OACrB,SAAEC,IAAaC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,OAC5CjM,EAAoB,OAAR8L,QAAQ,IAARA,OAAQ,EAARA,EAAUjK,KACrBqK,EAAcC,IAAmB5K,EAAAA,EAAAA,UAAS,KAC1CwC,EAAuBqI,IAA4B7K,EAAAA,EAAAA,UAAS,IAC3DxC,KAAMsN,IAAiB7M,EAAAA,EAAAA,OACxBwB,EAAWsL,IAAgB/K,EAAAA,EAAAA,UAAS,KACrC,KAAExC,EAAI,UAAEwN,IAAc7M,EAAAA,EAAAA,IAAqBjB,IAC1C+N,EAAOC,IAAYlL,EAAAA,EAAAA,UAAS,IAC5B2C,EAAWwI,IAAgBnL,EAAAA,EAAAA,WAAS,GAmBrCH,EAAuBwG,UAC3B,IACEqB,QAAQC,IAAI,2BAA4BjC,GACxC,MAAM0F,QAAuBC,EAAwB3F,GACrDgC,QAAQC,IAAI,gCAAiCyD,SAEvCxM,EAAoB,CAAE1B,SAAQuB,YAAWI,YAC/CsM,GAAa,GACbG,EAAAA,GAAMC,QAAQ,mBACdC,EAAS,aACX,CAAE,MAAOtC,GACPxB,QAAQwB,MAAM,yCAA0CA,GACxDoC,EAAAA,GAAMpC,MAAM,yCACd,GAEIsC,GAAWC,EAAAA,EAAAA,OACVJ,IAA2B1N,EAAAA,EAAAA,OAC3B+H,EAAagG,IAAkB1L,EAAAA,EAAAA,UAAS,CAC7CiH,YAAa,EACbO,kBAAmB,EACnBF,eAAgB,EAChBC,sBAAuB,EACvBrK,OAAQA,EACRyO,UAAkB,OAARpB,QAAQ,IAARA,OAAQ,EAARA,EAAUvO,QAAgB,OAARuO,QAAQ,IAARA,OAAQ,EAARA,EAAUoB,WAAY,GAClDC,OAAe,OAARrB,QAAQ,IAARA,OAAQ,EAARA,EAAUqB,QAAS,MAEpBpO,KAAMqO,EAAab,UAAWc,GAAqB9B,EAAyB,CAAE9M,SAAQuB,cAiB9F,OAfAwB,EAAAA,EAAAA,YAAU,KACR,GAAI6K,EAAc,CAChB,MAAMiB,EAAOjB,EAAakB,QAAQD,GAASA,EAAK7O,SAAWA,IAC3D0N,EAAgBmB,GAChBlB,EAA4C,GAAnBkB,EAAK,GAAGE,SACnC,IACC,CAACnB,KAEJ7K,EAAAA,EAAAA,YAAU,KACJzC,GACFuN,EAAavN,EACf,GACC,CAACA,IAGmB,aAAX,OAAR+M,QAAQ,IAARA,OAAQ,EAARA,EAAU2B,OACLnQ,EAAAA,EAAAA,KAACoQ,EAAAA,GAAQ,CAACC,GAAG,aAAaC,SAAO,IAEtCP,GACKjQ,EAAAA,EAAAA,MAAC+E,EAAAA,EAAG,CAAC+I,UAAU,SAASrF,GAAI,EAAE1I,SAAA,EAACG,EAAAA,EAAAA,KAACuQ,EAAAA,EAAgB,KAAGvQ,EAAAA,EAAAA,KAAC0E,EAAAA,EAAU,CAAA7E,SAAC,gCAEzD,OAAXiQ,QAAW,IAAXA,GAAAA,EAAaU,WACRxQ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAG,CAAC+I,UAAU,SAASrF,GAAI,EAAE1I,UAACG,EAAAA,EAAAA,KAAC0E,EAAAA,EAAU,CAACjE,QAAQ,KAAKyF,MAAM,QAAOrG,SAAC,6CAI7EG,EAAAA,EAAAA,KAACyQ,EAAAA,EAAa,CAAC9Q,MAAM,WAAWC,YAAY,mBAAkBC,UAC5DG,EAAAA,EAAAA,KAAC6E,EAAAA,EAAG,CAAC6L,GAAG,OAAM7Q,UACZC,EAAAA,EAAAA,MAAC2I,EAAAA,GAAI,CAACC,WAAS,EAAC3C,QAAS,EAAElG,SAAA,EACzBG,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAI6H,GAAI,EAAGC,GAAI,EAAE/Q,UAC9BG,EAAAA,EAAAA,KAAC6Q,EAAAA,EAAS,CAAAhR,UACRG,EAAAA,EAAAA,KAAC6E,EAAAA,EAAG,CACFqD,MAAM,OACN4I,UAAU,QACVC,UAAW,EACXC,QAAQ,OACRC,cAAc,SACd7I,WAAW,SACXpC,eAAe,SAAQnG,SAEtBoP,GACCjP,EAAAA,EAAAA,KAACuQ,EAAAA,EAAgB,KAEjBvQ,EAAAA,EAAAA,KAACyD,EAAsB,CACrBC,UAAWjC,EACXqB,QAASA,EACTa,SA1FGuN,CAAC5M,EAAYP,KAChCqK,GAAY+C,GAEH,IADUA,EAAKlB,QAAQ5L,GAAMA,EAAEC,aAAeA,IAChC,CAAEA,aAAYP,yBACnC,EAuFcH,gBAAiBA,EACjBC,mBApFSA,KAAO,IAAD4B,EAEkC2L,GADjEjD,GAAoBgD,GAAS9I,KAAKgJ,IAAIF,EAAO,EAAGzN,EAAUc,OAAS,KAC9DmC,EAAiBuC,SAAmC,QAA3BzD,EAAC/B,EAAUE,UAAgB,IAAA6B,OAAA,EAA1BA,EAA4BlB,OACzD8J,EAAoB,IAAI1H,EAA4C,QAA5ByK,EAAE1N,EAAUE,UAAgB,IAAAwN,OAAA,EAA1BA,EAA4B7M,KACxE,EAiFgBT,qBAAsBA,WAMhC9D,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAI6H,GAAI,EAAGC,GAAI,EAAE/Q,UAC9BC,EAAAA,EAAAA,MAAC2I,EAAAA,GAAI,CAACC,WAAS,EAAC3C,QAAS,EAAElG,SAAA,EACzBG,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAGjJ,UAChBG,EAAAA,EAAAA,KAAC6Q,EAAAA,EAAS,CAAAhR,UACRG,EAAAA,EAAAA,KAAC6E,EAAAA,EAAG,CACF2D,UAAU,QACVnI,GAAI,CACF2Q,QAAS,OACTC,cAAe,SACf7I,WAAY,QACZpC,eAAgB,SAChBsL,UAAW,OACXlI,OAAQ,QACRvJ,UAEFG,EAAAA,EAAAA,KAACuR,EAAiB,CAChBhL,eAAgB7C,EAAUc,OAC1BgC,WAAY1C,EACZ2C,sBAAuBA,EACvB7C,gBAAiBA,EACjB8C,iBAAkByH,EAClBrL,QAASA,EACTY,UAAWA,EACXiD,iBAAkBA,EAClBC,UAAWA,WAKnB5G,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAGjJ,UAChBG,EAAAA,EAAAA,KAAC6Q,EAAAA,EAAS,CAAAhR,UACRG,EAAAA,EAAAA,KAAC6E,EAAAA,EAAG,CACFqD,MAAM,QACNM,UAAU,QACVuI,UAAW,EACXC,QAAQ,OACRC,cAAc,SACd7I,WAAW,QACXpC,eAAe,SAAQnG,UAEvBG,EAAAA,EAAAA,KAACwR,EAAM,CAAC7H,YAAaA,EAAaC,kBAAmB+F,qBAQrD,C","sources":["components/container/PageContainer.js","components/shared/BlankCard.js","slices/cheatingLogApiSlice.js","slices/examApiSlice.js","slices/resultApiSlice.js","views/student/Components/MultipleChoiceQuestion.jsx","views/student/Components/NumberOfQuestions.jsx","views/student/Components/WebCam.jsx","slices/attemptApiSlice.js","views/student/TestPage.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\n\nconst PageContainer = ({ title, description, children }) => (\n  <div>\n    <Helmet>\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n    </Helmet>\n    {children}\n  </div>\n);\n\nPageContainer.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default PageContainer;\n","import { Card } from '@mui/material';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BlankCard = ({ children, className }) => {\n  return (\n    <Card\n      sx={{ p: 0, position: 'relative' }}\n      className={className}\n      elevation={9}\n      variant={undefined}\n    >\n      {children}\n    </Card>\n  );\n};\n\nBlankCard.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default BlankCard;\n","import { apiSlice } from './apiSlice';\n\n// Define the base URL for the exams API\nconst EXAMS_URL = '/api/exams';\n\n// Inject endpoints for the exam slice\nexport const cheatingLogApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    // Get cheating logs for a specific exam\n    getCheatingLogs: builder.query({\n      query: (examId) => ({\n        url: `${EXAMS_URL}/cheatingLogs/${examId}`, // Updated route\n        method: 'GET',\n      }),\n    }),\n    // Save a new cheating log entry for an exam\n    saveCheatingLog: builder.mutation({\n      query: (data) => ({\n        url: `${EXAMS_URL}/cheatingLogs`, // Updated route\n        method: 'POST',\n        body: data,\n      }),\n    }),\n  }),\n});\n\n// Export the generated hooks for each endpoint\nexport const { useGetCheatingLogsQuery, useSaveCheatingLogMutation } = cheatingLogApiSlice;\n","import { apiSlice } from './apiSlice';\n\n// Define the base URL for the exams API\nconst EXAMS_URL = '/api/exams';\n\n// Inject endpoints for the exam slice\nexport const examApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    // Get all exams\n    getExams: builder.query({\n      query: () => ({\n        url: `${EXAMS_URL}/exam`,\n        method: 'GET',\n      }),\n    }),\n    // Create a new exam\n    createExam: builder.mutation({\n      query: (data) => ({\n        url: `${EXAMS_URL}/exam`,\n        method: 'POST',\n        body: data,\n      }),\n    }),\n    // Get questions for a specific exam\n    getQuestions: builder.query({\n      query: (examId) => ({\n        url: `${EXAMS_URL}/exam/questions/${examId}`,\n        method: 'GET',\n      }),\n    }),\n    // Create a new question for an exam\n    createQuestion: builder.mutation({\n      query: (data) => ({\n        url: `${EXAMS_URL}/exam/questions`,\n        method: 'POST',\n        body: data,\n      }),\n    }),\n  }),\n});\n\n// Export the generated hooks for each endpoint\nexport const {\n  useGetExamsQuery,\n  useCreateExamMutation,\n  useGetQuestionsQuery,\n  useCreateQuestionMutation,\n} = examApiSlice;\n","import { apiSlice } from './apiSlice';\r\n\r\nconst RESULTS_URL = '/api/results';\r\n\r\nexport const resultApiSlice = apiSlice.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // Teacher: Get all results for an exam\r\n    getResultsByExam: builder.query({\r\n      query: (examId) => ({\r\n        url: `${RESULTS_URL}/exam/${examId}`,\r\n        method: 'GET',\r\n      }),\r\n    }),\r\n    // Get all results for a student\r\n    getStudentResults: builder.query({\r\n      query: (studentId) => ({\r\n        url: `${RESULTS_URL}/student/${studentId}`,\r\n        method: 'GET',\r\n      }),\r\n      providesTags: [{ type: 'StudentResults' }],\r\n    }),\r\n    // Student: Submit answers to create result\r\n    submitStudentResult: builder.mutation({\r\n      query: ({ studentId, examId, answers }) => ({\r\n        url: `${RESULTS_URL}/student`,\r\n        method: 'POST',\r\n        body: { studentId, examId, answers },\r\n      }),\r\n    }),\r\n    // Teacher: Update result status for a student\r\n    updateResultStatus: builder.mutation({\r\n      query: ({ resultId, status, updatedBy }) => ({\r\n        url: `${RESULTS_URL}/${resultId}`,\r\n        method: 'PUT',\r\n        body: { status, updatedBy },\r\n      }),\r\n      invalidatesTags: [{ type: 'StudentResults' }],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetStudentResultsQuery, useUpdateResultStatusMutation, useSubmitStudentResultMutation, useGetResultsByExamQuery } = resultApiSlice;\r\n","import React, { useEffect, useState } from 'react';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\n\nimport { Container } from '@mui/material';\nimport { useGetQuestionsQuery } from 'src/slices/examApiSlice';\nimport { useParams } from 'react-router';\n\nexport default function MultipleChoiceQuestion({ questions, answers, onAnswer, currentQuestion, handleNextQuestion, handleTestSubmission }) {\n  // selectedOptionIndex is controlled by parent answers state\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(null);\n  useEffect(() => {\n    // Set selectedOptionIndex from answers when question changes\n    if (answers && questions && questions[currentQuestion]) {\n      const answerObj = answers.find(a => a.questionId === questions[currentQuestion]._id);\n      setSelectedOptionIndex(answerObj ? answerObj.selectedOptionIndex : null);\n    }\n  }, [currentQuestion, answers, questions]);\n\n  const handleOptionChange = (idx) => {\n    setSelectedOptionIndex(idx);\n    if (typeof onAnswer === 'function' && questions[currentQuestion]?._id) {\n      onAnswer(questions[currentQuestion]._id, idx);\n    }\n  };\n\n  // handleNextQuestion is now passed from parent\n\n  if (!questions || questions.length === 0) {\n    return <Typography variant=\"body1\">No questions available.</Typography>;\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\" mb={3}>\n          Question {currentQuestion + 1}:\n        </Typography>\n        <Typography variant=\"body1\" mb={3}>\n          {questions[currentQuestion].question}\n        </Typography>\n        <Box mb={3}>\n          <FormControl component=\"fieldset\">\n            {questions[currentQuestion].options.map((option, idx) => (\n              <FormControlLabel\n                key={option._id}\n                control={\n                  <Checkbox\n                    checked={selectedOptionIndex === idx}\n                    onChange={() => handleOptionChange(idx)}\n                  />\n                }\n                label={option.optionText}\n              />\n            ))}\n          </FormControl>\n        </Box>\n        <Stack direction=\"row\" spacing={2} justifyContent=\"space-between\">\n          {currentQuestion === questions.length - 1 ? (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleTestSubmission}\n              style={{ marginLeft: 'auto' }}\n            >\n              Finish\n            </Button>\n          ) : (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleNextQuestion}\n              disabled={selectedOptionIndex === null}\n              style={{ marginLeft: 'auto' }}\n            >\n              Next Question\n            </Button>\n          )}\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport Grid from '@mui/material/Grid';\nimport Avatar from '@mui/material/Avatar';\nimport questions from './questionData';\nimport BlankCard from 'src/components/shared/BlankCard';\nimport { Box, Button, Stack, Typography } from '@mui/material';\nimport Countdown from 'react-countdown';\nconst NumberOfQuestions = ({ questionLength, submitTest, examDurationInSeconds, currentQuestion, onJumpToQuestion, answers, questions, answeredAndMoved, submitted }) => {\n  const totalQuestions = questionLength; //questions.length;\n  // Generate an array of question numbers from 1 to totalQuestions\n  const questionNumbers = Array.from({ length: totalQuestions }, (_, index) => index + 1);\n  const handleQuestionButtonClick = (questionNumber) => {\n    if (typeof onJumpToQuestion === 'function') {\n      onJumpToQuestion(questionNumber - 1);\n    }\n  };\n\n  // Create an array of rows, each containing up to 4 question numbers\n  const rows = [];\n  for (let i = 0; i < questionNumbers.length; i += 5) {\n    rows.push(questionNumbers.slice(i, i + 5));\n  }\n\n  // Timer related states\n  const [timer, setTimer] = useState(examDurationInSeconds); // Initialize timer with examDurationInSeconds\n  // Countdown timer\n  useEffect(() => {\n    setTimer(examDurationInSeconds);\n  }, [examDurationInSeconds]);\n\n  useEffect(() => {\n    if (submitted) return; // Stop timer if submitted\n    if (timer <= 0) {\n      submitTest();\n      return;\n    }\n    const countdown = setInterval(() => {\n      setTimer((prevTimer) => prevTimer - 1);\n    }, 1000);\n    return () => {\n      clearInterval(countdown);\n    };\n  }, [timer, submitTest, submitted]);\n\n  return (\n    <>\n      <Box\n        position=\"sticky\"\n        top=\"0\"\n        zIndex={1}\n        bgcolor=\"white\" // Set background color as needed\n        paddingY=\"10px\" // Add padding to top and bottom as needed\n        width=\"100%\"\n        px={3}\n        // mb={5}\n      >\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Typography variant=\"h6\">\n            Questions: {currentQuestion + 1}/{questionLength}\n          </Typography>\n          <Typography variant=\"h6\">\n            Time Left: {Math.floor(timer / 60)}:{timer % 60}\n          </Typography>\n          <Button variant=\"contained\" onClick={() => submitTest()} color=\"error\" disabled={submitted}>\n            {submitted ? 'Test Submitted' : 'Finish Test'}\n          </Button>\n        </Stack>\n      </Box>\n\n      <Box p={3} mt={5} maxHeight=\"270px\">\n        <Grid container spacing={1}>\n          {rows.map((row, rowIndex) => (\n            <Grid key={rowIndex} item xs={12}>\n              <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"start\">\n                {row.map((questionNumber) => {\n                  const questionObj = questions && questions[questionNumber - 1];\n                  const isAnsweredAndMoved = answeredAndMoved && questionObj && answeredAndMoved.includes(questionObj._id);\n                  return (\n                    <Avatar\n                      key={questionNumber}\n                      variant=\"rounded\"\n                      style={{\n                        width: '40px',\n                        height: '40px',\n                        fontSize: '20px',\n                        cursor: 'pointer',\n                        margin: '3px',\n                        background: isAnsweredAndMoved ? '#90ee90' : '#ccc',\n                        color: '#fff',\n                      }}\n                      onClick={() => handleQuestionButtonClick(questionNumber)}\n                    >\n                      {questionNumber}\n                    </Avatar>\n                  );\n                })}\n              </Stack>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n    </>\n  );\n};\n\nexport default NumberOfQuestions;\n","import React, { useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport * as tf from '@tensorflow/tfjs';\nimport * as cocossd from '@tensorflow-models/coco-ssd';\nimport Webcam from 'react-webcam';\nimport { drawRect } from './utilities';\n\nimport { Box, Card } from '@mui/material';\nimport swal from 'sweetalert';\n\nexport default function Home({ cheatingLog, updateCheatingLog }) {\n  const mediaRecorderRef = useRef(null);\n  const [recording, setRecording] = useState(false);\n  const [videoBlob, setVideoBlob] = useState(null);\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  // Get studentId and examId from cheatingLog\n  const studentId = cheatingLog?.studentId || cheatingLog?._id || null;\n  const examId = cheatingLog?.examId || null;\n\n  const runCoco = async () => {\n    const net = await cocossd.load();\n    console.log('Ai models loaded.');\n\n    setInterval(() => {\n      detect(net);\n    }, 1500);\n  };\n\n  const detect = async (net) => {\n    if (\n      typeof webcamRef.current !== 'undefined' &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      const obj = await net.detect(video);\n\n      const ctx = canvasRef.current.getContext('2d');\n\n      let person_count = 0;\n      if (obj.length < 1) {\n        updateCheatingLog((prevLog) => ({\n          ...prevLog,\n          noFaceCount: prevLog.noFaceCount + 1,\n        }));\n        swal('Face Not Visible', 'Action has been Recorded', 'error');\n      }\n      obj.forEach((element) => {\n        if (element.class === 'cell phone') {\n          updateCheatingLog((prevLog) => ({\n            ...prevLog,\n            cellPhoneCount: prevLog.cellPhoneCount + 1,\n          }));\n          swal('Cell Phone Detected', 'Action has been Recorded', 'error');\n        }\n        if (element.class === 'book') {\n          updateCheatingLog((prevLog) => ({\n            ...prevLog,\n            prohibitedObjectCount: prevLog.prohibitedObjectCount + 1,\n          }));\n          swal('Prohibited Object Detected', 'Action has been Recorded', 'error');\n        }\n\n        if (!element.class === 'person') {\n          swal('Face Not Visible', 'Action has been Recorded', 'error');\n        }\n        if (element.class === 'person') {\n          person_count++;\n          if (person_count > 1) {\n            updateCheatingLog((prevLog) => ({\n              ...prevLog,\n              multipleFaceCount: prevLog.multipleFaceCount + 1,\n            }));\n            swal('Multiple Faces Detected', 'Action has been Recorded', 'error');\n            person_count = 0;\n          }\n        }\n      });\n    }\n  };\n  useEffect(() => {\n    runCoco();\n    // Start video recording when webcam is ready\n    let mediaStream = null;\n    let recorder = null;\n    let chunks = [];\n    const startRecording = async () => {\n      if (webcamRef.current && webcamRef.current.stream) {\n        mediaStream = webcamRef.current.stream;\n        recorder = new window.MediaRecorder(mediaStream, { mimeType: 'video/webm' });\n        mediaRecorderRef.current = recorder;\n        recorder.ondataavailable = (e) => {\n          if (e.data && e.data.size > 0) {\n            chunks.push(e.data);\n          }\n        };\n        recorder.onstop = async () => {\n          const blob = new Blob(chunks, { type: 'video/webm' });\n          setVideoBlob(blob);\n          // Automatically upload video to backend\n          if (blob && studentId && examId) {\n            const formData = new FormData();\n            formData.append('video', blob, `exam_${examId}_student_${studentId}.webm`);\n            formData.append('studentId', studentId);\n            formData.append('examId', examId);\n            try {\n              await axios.post('/api/videos', formData, {\n                headers: { 'Content-Type': 'multipart/form-data' },\n              });\n              console.log('Video uploaded successfully');\n            } catch (err) {\n              console.error('Video upload failed:', err);\n            }\n          }\n        };\n        recorder.start();\n        setRecording(true);\n      }\n    };\n    // Wait for webcam to be ready\n    const interval = setInterval(() => {\n      if (webcamRef.current && webcamRef.current.stream && !recording) {\n        startRecording();\n        clearInterval(interval);\n      }\n    }, 500);\n    return () => {\n      // Stop recording and upload when component unmounts\n      if (mediaRecorderRef.current && recording) {\n        mediaRecorderRef.current.stop();\n        setRecording(false);\n      }\n    };\n  }, [studentId, examId, recording]);\n\n  return (\n    <Box>\n      <Card variant=\"outlined\">\n        <Webcam\n          ref={webcamRef}\n          muted={true}\n          style={{\n            left: 0,\n            right: 0,\n            textAlign: 'center',\n            zindex: 9,\n\n            width: '100%',\n            height: '100%',\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: 'absolute',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            left: 0,\n            right: 0,\n            textAlign: 'center',\n            zindex: 8,\n            width: 240,\n            height: 240,\n          }}\n        />\n      </Card>\n    </Box>\n  );\n}\n","import { apiSlice } from './apiSlice';\r\n\r\nconst ATTEMPT_URL = '/api/attempts';\r\n\r\nexport const attemptApiSlice = apiSlice.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    checkExamAttempt: builder.query({\r\n      query: ({ examId, studentId }) => ({\r\n        url: `${ATTEMPT_URL}/check/${examId}/${studentId}`,\r\n        method: 'GET',\r\n      }),\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useCheckExamAttemptQuery } = attemptApiSlice;\r\n","import React, { useEffect, useState } from 'react';\nimport { Navigate, useNavigate, useParams } from 'react-router-dom';\nimport { Box, Grid, CircularProgress, Typography } from '@mui/material';\nimport PageContainer from 'src/components/container/PageContainer';\nimport BlankCard from 'src/components/shared/BlankCard';\nimport MultipleChoiceQuestion from './Components/MultipleChoiceQuestion';\nimport NumberOfQuestions from './Components/NumberOfQuestions';\nimport WebCam from './Components/WebCam';\nimport { useGetExamsQuery, useGetQuestionsQuery } from '../../slices/examApiSlice';\nimport { useSaveCheatingLogMutation } from 'src/slices/cheatingLogApiSlice';\nimport { useSelector } from 'react-redux';\nimport { useSubmitStudentResultMutation } from 'src/slices/resultApiSlice';\nimport { useCheckExamAttemptQuery } from 'src/slices/attemptApiSlice';\nimport { toast } from 'react-toastify';\n\nconst TestPage = () => {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [submitStudentResult] = useSubmitStudentResultMutation();\n  const [answers, setAnswers] = useState([]); // {questionId, selectedOptionIndex}\n  const [answeredAndMoved, setAnsweredAndMoved] = useState([]); // questionId[]\n  const { examId, testId } = useParams();\n  const { userInfo } = useSelector((state) => state.auth);\n  const studentId = userInfo?._id;\n  const [selectedExam, setSelectedExam] = useState([]);\n  const [examDurationInSeconds, setexamDurationInSeconds] = useState(0);\n  const { data: userExamdata } = useGetExamsQuery();\n  const [questions, setQuestions] = useState([]);\n  const { data, isLoading } = useGetQuestionsQuery(examId);\n  const [score, setScore] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n\n  // Collect answers from child component\n  const handleAnswer = (questionId, selectedOptionIndex) => {\n    setAnswers((prev) => {\n      const filtered = prev.filter((a) => a.questionId !== questionId);\n      return [...filtered, { questionId, selectedOptionIndex }];\n    });\n  };\n\n  // Called when student moves to next question\n  const handleNextQuestion = () => {\n    setCurrentQuestion((prev) => Math.min(prev + 1, questions.length - 1));\n    if (!answeredAndMoved.includes(questions[currentQuestion]?._id)) {\n      setAnsweredAndMoved([...answeredAndMoved, questions[currentQuestion]?._id]);\n    }\n  };\n\n  // Called when student submits the test\n  const handleTestSubmission = async () => {\n    try {\n      console.log('Submitting cheating log:', cheatingLog);\n      const cheatingLogRes = await saveCheatingLogMutation(cheatingLog);\n      console.log('Cheating log mutation result:', cheatingLogRes);\n      // Submit student result (add your actual logic here)\n      await submitStudentResult({ examId, studentId, answers });\n      setSubmitted(true);\n      toast.success('Test submitted!');\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Error submitting test or cheating log:', error);\n      toast.error('Error submitting test or cheating log.');\n    }\n  };\n  const navigate = useNavigate();\n  const [saveCheatingLogMutation] = useSaveCheatingLogMutation();\n  const [cheatingLog, setCheatingLog] = useState({\n    noFaceCount: 0,\n    multipleFaceCount: 0,\n    cellPhoneCount: 0,\n    prohibitedObjectCount: 0,\n    examId: examId,\n    username: userInfo?.name || userInfo?.username || '',\n    email: userInfo?.email || '',\n  });\n  const { data: attemptData, isLoading: isAttemptLoading } = useCheckExamAttemptQuery({ examId, studentId });\n\n  useEffect(() => {\n    if (userExamdata) {\n      const exam = userExamdata.filter((exam) => exam.examId === examId);\n      setSelectedExam(exam);\n      setexamDurationInSeconds(exam[0].duration * 60);\n    }\n  }, [userExamdata]);\n\n  useEffect(() => {\n    if (data) {\n      setQuestions(data);\n    }\n  }, [data]);\n\n  // Block teachers from attempting exams\n  if (userInfo?.role === 'teacher') {\n    return <Navigate to=\"/dashboard\" replace />;\n  }\n  if (isAttemptLoading) {\n    return <Box textAlign=\"center\" mt={8}><CircularProgress /><Typography>Checking exam attempt...</Typography></Box>;\n  }\n  if (attemptData?.attempted) {\n    return <Box textAlign=\"center\" mt={8}><Typography variant=\"h5\" color=\"error\">You have already attempted this exam.</Typography></Box>;\n  }\n\n  return (\n    <PageContainer title=\"TestPage\" description=\"This is TestPage\">\n      <Box pt=\"3rem\">\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={7} lg={7}>\n            <BlankCard>\n              <Box\n                width=\"100%\"\n                minHeight=\"400px\"\n                boxShadow={3}\n                display=\"flex\"\n                flexDirection=\"column\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n              >\n                {isLoading ? (\n                  <CircularProgress />\n                ) : (\n                  <MultipleChoiceQuestion\n                    questions={data}\n                    answers={answers}\n                    onAnswer={handleAnswer}\n                    currentQuestion={currentQuestion}\n                    handleNextQuestion={handleNextQuestion}\n                    handleTestSubmission={handleTestSubmission}\n                  />\n                )}\n              </Box>\n            </BlankCard>\n          </Grid>\n          <Grid item xs={12} md={5} lg={5}>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <BlankCard>\n                  <Box\n                    maxHeight=\"300px\"\n                    sx={{\n                      display: 'flex',\n                      flexDirection: 'column',\n                      alignItems: 'start',\n                      justifyContent: 'center',\n                      overflowY: 'auto',\n                      height: '100%',\n                    }}\n                  >\n                    <NumberOfQuestions\n                      questionLength={questions.length}\n                      submitTest={handleTestSubmission}\n                      examDurationInSeconds={examDurationInSeconds}\n                      currentQuestion={currentQuestion}\n                      onJumpToQuestion={setCurrentQuestion}\n                      answers={answers}\n                      questions={questions}\n                      answeredAndMoved={answeredAndMoved}\n                      submitted={submitted}\n                    />\n                  </Box>\n                </BlankCard>\n              </Grid>\n              <Grid item xs={12}>\n                <BlankCard>\n                  <Box\n                    width=\"300px\"\n                    maxHeight=\"180px\"\n                    boxShadow={3}\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    alignItems=\"start\"\n                    justifyContent=\"center\"\n                  >\n                    <WebCam cheatingLog={cheatingLog} updateCheatingLog={setCheatingLog} />\n                  </Box>\n                </BlankCard>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Box>\n    </PageContainer>\n  );\n};\n\nexport default TestPage;\n"],"names":["_ref","title","description","children","_jsxs","Helmet","_jsx","name","content","className","Card","sx","p","position","elevation","variant","undefined","EXAMS_URL","cheatingLogApiSlice","apiSlice","injectEndpoints","endpoints","builder","getCheatingLogs","query","examId","url","concat","method","saveCheatingLog","mutation","data","body","useGetCheatingLogsQuery","useSaveCheatingLogMutation","examApiSlice","getExams","createExam","getQuestions","createQuestion","useGetExamsQuery","useCreateExamMutation","useGetQuestionsQuery","useCreateQuestionMutation","RESULTS_URL","resultApiSlice","getResultsByExam","getStudentResults","studentId","providesTags","type","submitStudentResult","answers","updateResultStatus","_ref2","resultId","status","updatedBy","invalidatesTags","useGetStudentResultsQuery","useUpdateResultStatusMutation","useSubmitStudentResultMutation","useGetResultsByExamQuery","MultipleChoiceQuestion","questions","onAnswer","currentQuestion","handleNextQuestion","handleTestSubmission","selectedOptionIndex","setSelectedOptionIndex","useState","useEffect","answerObj","find","a","questionId","_id","length","CardContent","Typography","mb","question","Box","FormControl","component","options","map","option","idx","FormControlLabel","control","Checkbox","checked","onChange","_questions$currentQue","handleOptionChange","label","optionText","Stack","direction","spacing","justifyContent","Button","color","onClick","style","marginLeft","disabled","questionLength","submitTest","examDurationInSeconds","onJumpToQuestion","answeredAndMoved","submitted","totalQuestions","questionNumbers","Array","from","_","index","rows","i","push","slice","timer","setTimer","countdown","setInterval","prevTimer","clearInterval","_Fragment","top","zIndex","bgcolor","paddingY","width","px","alignItems","Math","floor","mt","maxHeight","Grid","container","row","rowIndex","item","xs","questionNumber","questionObj","isAnsweredAndMoved","includes","Avatar","height","fontSize","cursor","margin","background","handleQuestionButtonClick","Home","cheatingLog","updateCheatingLog","mediaRecorderRef","useRef","recording","setRecording","videoBlob","setVideoBlob","webcamRef","canvasRef","detect","async","current","video","readyState","videoWidth","videoHeight","obj","net","getContext","person_count","prevLog","_objectSpread","noFaceCount","swal","forEach","element","class","cellPhoneCount","prohibitedObjectCount","multipleFaceCount","cocossd","console","log","runCoco","mediaStream","recorder","chunks","interval","stream","window","MediaRecorder","mimeType","ondataavailable","e","size","onstop","blob","Blob","formData","FormData","append","axios","post","headers","err","error","start","startRecording","stop","Webcam","ref","muted","left","right","textAlign","zindex","marginRight","attemptApiSlice","checkExamAttempt","useCheckExamAttemptQuery","TestPage","setCurrentQuestion","setAnswers","setAnsweredAndMoved","testId","useParams","userInfo","useSelector","state","auth","selectedExam","setSelectedExam","setexamDurationInSeconds","userExamdata","setQuestions","isLoading","score","setScore","setSubmitted","cheatingLogRes","saveCheatingLogMutation","toast","success","navigate","useNavigate","setCheatingLog","username","email","attemptData","isAttemptLoading","exam","filter","duration","role","Navigate","to","replace","CircularProgress","attempted","PageContainer","pt","md","lg","BlankCard","minHeight","boxShadow","display","flexDirection","handleAnswer","prev","_questions$currentQue2","min","overflowY","NumberOfQuestions","WebCam"],"sourceRoot":""}