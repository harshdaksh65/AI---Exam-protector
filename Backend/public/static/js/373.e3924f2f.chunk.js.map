{"version":3,"file":"static/js/373.e3924f2f.chunk.js","mappings":"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","sources":["components/container/PageContainer.js","components/shared/DashboardCard.js","slices/resultApiSlice.js","views/student/ResultPage.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\n\nconst PageContainer = ({ title, description, children }) => (\n  <div>\n    <Helmet>\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n    </Helmet>\n    {children}\n  </div>\n);\n\nPageContainer.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default PageContainer;\n","import React from 'react';\nimport { Card, CardContent, Typography, Stack, Box } from '@mui/material';\n\nconst DashboardCard = ({\n  title,\n  subtitle,\n  children,\n  action,\n  footer,\n  cardheading,\n  headtitle,\n  headsubtitle,\n  middlecontent,\n}) => {\n\n  return (\n    <Card\n      sx={{ padding: 0 }}\n      elevation={9}\n      variant={undefined}\n    >\n      {cardheading ? (\n        <CardContent>\n          <Typography variant=\"h5\">{headtitle}</Typography>\n          <Typography variant=\"subtitle2\" color=\"textSecondary\">\n            {headsubtitle}\n          </Typography>\n        </CardContent>\n      ) : (\n        <CardContent sx={{ p: \"30px\" }}>\n          {title ? (\n            <Stack\n              direction=\"row\"\n              spacing={2}\n              justifyContent=\"space-between\"\n              alignItems={'center'}\n              mb={3}\n            >\n              <Box>\n                {title ? <Typography variant=\"h5\">{title}</Typography> : ''}\n\n                {subtitle ? (\n                  <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                    {subtitle}\n                  </Typography>\n                ) : (\n                  ''\n                )}\n              </Box>\n              {action}\n            </Stack>\n          ) : null}\n\n          {children}\n        </CardContent>\n      )}\n\n      {middlecontent}\n      {footer}\n    </Card>\n  );\n};\n\nexport default DashboardCard;\n","import { apiSlice } from './apiSlice';\r\n\r\nconst RESULTS_URL = '/api/results';\r\n\r\nexport const resultApiSlice = apiSlice.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // Teacher: Get all results for an exam\r\n    getResultsByExam: builder.query({\r\n      query: (examId) => ({\r\n        url: `${RESULTS_URL}/exam/${examId}`,\r\n        method: 'GET',\r\n      }),\r\n    }),\r\n    // Get all results for a student\r\n    getStudentResults: builder.query({\r\n      query: (studentId) => ({\r\n        url: `${RESULTS_URL}/student/${studentId}`,\r\n        method: 'GET',\r\n      }),\r\n      providesTags: [{ type: 'StudentResults' }],\r\n    }),\r\n    // Student: Submit answers to create result\r\n    submitStudentResult: builder.mutation({\r\n      query: ({ studentId, examId, answers }) => ({\r\n        url: `${RESULTS_URL}/student`,\r\n        method: 'POST',\r\n        body: { studentId, examId, answers },\r\n      }),\r\n    }),\r\n    // Teacher: Update result status for a student\r\n    updateResultStatus: builder.mutation({\r\n      query: ({ resultId, status, updatedBy }) => ({\r\n        url: `${RESULTS_URL}/${resultId}`,\r\n        method: 'PUT',\r\n        body: { status, updatedBy },\r\n      }),\r\n      invalidatesTags: [{ type: 'StudentResults' }],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetStudentResultsQuery, useUpdateResultStatusMutation, useSubmitStudentResultMutation, useGetResultsByExamQuery } = resultApiSlice;\r\n","\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Typography, Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\nimport { Navigate } from 'react-router-dom';\nimport PageContainer from 'src/components/container/PageContainer';\nimport DashboardCard from '../../components/shared/DashboardCard';\nimport { useGetStudentResultsQuery } from 'src/slices/resultApiSlice';\n\nconst ResultPage = () => {\n  const { userInfo } = useSelector((state) => state.auth);\n  const studentId = userInfo?._id;\n  const { data: results, isLoading } = useGetStudentResultsQuery(studentId);\n\n  // Redirect teachers away from /result\n  if (userInfo?.role === 'teacher') {\n    return <Navigate to=\"/dashboard\" replace />;\n  }\n\n  return (\n    <PageContainer title=\"Result Page\" description=\"Your exam results\">\n      <DashboardCard title=\"Exam Results\">\n        <TableContainer component={Paper} sx={{ maxWidth: 700, margin: '0 auto', mt: 2 }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Sno</TableCell>\n                <TableCell>Exam Name</TableCell>\n                <TableCell>Score (%)</TableCell>\n                <TableCell>Status</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {isLoading ? (\n                <TableRow>\n                  <TableCell colSpan={4} align=\"center\">Loading...</TableCell>\n                </TableRow>\n              ) : results && results.length > 0 ? (\n                results.map((result, idx) => (\n                  <TableRow key={result._id}>\n                    <TableCell>{idx + 1}</TableCell>\n                    <TableCell>{result.exam?.examName || 'Exam'}</TableCell>\n                    <TableCell>{result.score}%</TableCell>\n                    <TableCell>{result.status.charAt(0).toUpperCase() + result.status.slice(1)}</TableCell>\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={4} align=\"center\">No results found.</TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <Box mt={4} textAlign=\"center\">\n          <Typography variant=\"subtitle1\">Thank you for participating in the exams!</Typography>\n        </Box>\n      </DashboardCard>\n    </PageContainer>\n  );\n};\n\nexport default ResultPage;\n"],"names":["_ref","title","description","children","_jsxs","Helmet","_jsx","name","content","subtitle","action","footer","cardheading","headtitle","headsubtitle","middlecontent","Card","sx","padding","elevation","variant","undefined","CardContent","Typography","color","p","Stack","direction","spacing","justifyContent","alignItems","mb","Box","RESULTS_URL","resultApiSlice","apiSlice","injectEndpoints","endpoints","builder","getResultsByExam","query","examId","url","concat","method","getStudentResults","studentId","providesTags","type","submitStudentResult","mutation","answers","body","updateResultStatus","_ref2","resultId","status","updatedBy","invalidatesTags","useGetStudentResultsQuery","useUpdateResultStatusMutation","useSubmitStudentResultMutation","useGetResultsByExamQuery","ResultPage","userInfo","useSelector","state","auth","_id","data","results","isLoading","role","Navigate","to","replace","PageContainer","DashboardCard","TableContainer","component","Paper","maxWidth","margin","mt","Table","TableHead","TableRow","TableCell","TableBody","colSpan","align","length","map","result","idx","_result$exam","exam","examName","score","charAt","toUpperCase","slice","textAlign"],"sourceRoot":""}